version: '3.8'

services:
  frontend:
    build:
      context: ../frontend
      dockerfile: ../server-setup/frontend.dev.dockerfile
    volumes:
      - ../frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost
    networks:
      - uvcs-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - uvcs-network

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: uvcs
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - uvcs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build:
      context: ../backend
      dockerfile: ../server-setup/backend.dev.dockerfile
    environment:
      - DB_TYPE=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - POSTGRES_DB=uvcs
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - GIN_MODE=debug
      - PORT=8080
    volumes:
      - ../backend:/app
      - uvcs-data:/app/data
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - uvcs-network

networks:
  uvcs-network:
    driver: bridge

volumes:
  uvcs-data:
    driver: local
  postgres-data:
    driver: local 